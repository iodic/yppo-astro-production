---
import { sanityClient } from "sanity:client"
import menu from "@/config/menu.json";
import { i18nConfig } from "@/i18n/i18nConfig";
import { getClientId, getRedirectUri, getBaseUri } from "@/helper/auth";

const { lang } = Astro.props

const headerData = await sanityClient.fetch(
  `*[_type == 'header' && language == '${lang}'] {
      "logoSrc": logo.asset->url,
      mainMenuObject,
  }`
)

const { logoSrc, mainMenuObject } = headerData[0] || {}

export interface ChildNavigationLink {
  name: string;
  url: string;
}

export interface NavigationLink {
  name: string;
  url: string;
  hasChildren?: boolean;
  children?: ChildNavigationLink[];
}

const { main }: { main: NavigationLink[] } = menu;
const { pathname } = Astro.url;

const currentLanguage = Astro.currentLocale;
const { defaultLocale } = i18nConfig;
const languagePrefix = currentLanguage === defaultLocale ? false : true;

const clientId = getClientId();
const redirectUri = getRedirectUri();
const baseUri = getBaseUri();
---

<input type="hidden" id="clientId" value={clientId} />
<input type="hidden" id="redirectUri" value={redirectUri} />
<input type="hidden" id="baseUri" value={baseUri} />

<header class="header">
  <nav class="navbar container">
    <!-- logo -->
    <div class="order-0">
      <div class="order-0">
        <a
          href={languagePrefix ? `/${currentLanguage}` : "/"}
          class="navbar-brand block"
        >
          <picture class="header-logo">
            <source srcset="/images/logo.svg" media="(min-width: 1024px)" />
            <source srcset="/images/logo-small.svg" />
            <img
              src="/images/logo.svg"
              data-image-component="true"
              alt="yppo"
              width="462"
              height="148"
              loading="eager"
              decoding="async"
            />
          </picture>
        </a>
      </div>
    </div>
    <!-- navbar toggler -->
    <input id="nav-toggle" type="checkbox" class="hidden" />
    <label
      id="show-button"
      for="nav-toggle"
      class="order-2 flex cursor-pointer items-center lg:order-1 lg:hidden"
    >
      <svg class="h-6 fill-current" viewBox="0 0 20 20">
        <title>Menu Open</title>
        <path d="M0 3h20v2H0V3z m0 6h20v2H0V9z m0 6h20v2H0V0z"></path>
      </svg>
    </label>
    <label
      id="hide-button"
      for="nav-toggle"
      class="order-2 hidden cursor-pointer items-center lg:order-1"
    >
      <svg class="h-6 fill-current" viewBox="0 0 20 20">
        <title>Menu Close</title>
        <polygon
          points="11 9 22 9 22 11 11 11 11 22 9 22 9 11 -2 11 -2 9 9 9 9 -2 11 -2"
          transform="rotate(45 10 10)"></polygon>
      </svg>
    </label>
    <!-- /navbar toggler -->

    {mainMenuObject?.menuRepeater &&
      <ul
        id="nav-menu"
        class="navbar-nav order-3 hidden w-full lg:order-1 lg:flex lg:w-auto lg:space-x-2"
      >
        {
          mainMenuObject?.menuRepeater.map(({pageUrl, menuItemChildren}) => (
            <>
              {menuItemChildren ? (
                <li
                  class="nav-item nav-dropdown group relative cursor-pointer "
                  id="dropdown-button"
                >
                  <span
                    class={`nav-link inline-flex items-center ${
                      menuItemChildren?.map(({ url: childUrl }) => childUrl).includes(pathname)
                        ? "active"
                        : ""
                    }`}
                  >
                    {pageUrl?.urlTitle}
                    <svg class="h-4 w-4 fill-current" viewBox="0 0 20 20">
                      <path d="M9.293 12.95l.707.707L15.657 8l-1.414-1.414L10 10.828 5.757 6.586 4.343 8z" />
                    </svg>
                  </span>
                  <ul
                    id="dropdown"
                    class="nav-dropdown-list mx-auto hidden duration-300 lg:invisible lg:absolute lg:block lg:h-auto lg:w-[13.5rem] lg:opacity-0 lg:group-hover:visible lg:group-hover:opacity-100"
                  >
                    {menuItemChildren?.map(({ urlTitle: childUrlTitle, url: childUrl }) => (
                      <li class="nav-dropdown-item">
                        <a
                          href={
                            languagePrefix
                              ? `/${currentLanguage}${childUrl}`
                              : childUrl
                          }
                          class={`nav-dropdown-link block ${
                            (pathname === `${childUrl}/` ||
                              pathname === childUrl) &&
                            "text-primary"
                          }`}
                        >
                          {childUrlTitle}
                        </a>
                      </li>
                    ))}
                  </ul>
                </li>
              ) : (
                <li class="nav-item">
                  <a
                    href={
                      languagePrefix ? `/${currentLanguage}${pageUrl?.url}` : pageUrl?.url
                    }
                    class={`nav-link inline-block lg:block ${
                      (pathname === `${pageUrl?.url}/` || pathname === pageUrl?.url) &&
                      "active"
                    }`}
                  >
                    {pageUrl?.urlTitle}
                  </a>
                </li>
              )}
            </>
          ))
        }
        <li class="nav-item mt-2 lg:hidden">
          <a class="btn btn-primary btn-sm border-border" href="/get-started"
            >Get Started</a
          >
        </li>
        <li class="nav-item mt-2 lg:hidden">
          <button class="btn btn-primary btn-sm border-border" id="authLink"
            >Login</button
          >
        </li>
      </ul>
    }

    <div class="order-1 ml-auto hidden items-center md:order-2 md:ml-0 lg:flex">
      <a class="header-cta" href="/get-started">Get Started</a>
      <button class="ml-5 header-cta" id="authLink">Login</button>
    </div>
  </nav>
</header>

<script is:inline>
  document.addEventListener("astro:page-load", () => {
    const header = document.querySelector(".header");
    window.addEventListener("scroll", () => {
      if (window.scrollY > 0) {
        header.classList.add("header-sticky");
      } else {
        header.classList.remove("header-sticky");
      }
    });
  });

  const clientId = document.getElementById("clientId").value;
  const redirectUri = document.getElementById("redirectUri").value;
  const baseUri = document.getElementById("baseUri").value;

  document
    .getElementById("authLink")
    .addEventListener("click", function (event) {
      const authorizationUri = `${baseUri}/oauth/authorize?client_id=${clientId}&redirect_uri=${encodeURIComponent(redirectUri)}&response_type=code&scope=public`;
      window.location.href = authorizationUri;
    });
</script>
