<!-- Example HTML page to handle the callback --><!doctype html>
<html>
  <head>
    <title>OAuth Callback Handler</title>
  </head>
  <body>
    <center>
      <a href="#" id="authLink">AUTH</a>
      <div id="userInfo" style="margin-top: 20px;"></div>
    </center>
    <script>
      document
        .getElementById("authLink")
        .addEventListener("click", function (event) {
          const clientId = "A0USaYg7dVEdtVPztz5TBThpbOwk9xCqXKx2p9g0zwo";
          const redirectUri = encodeURIComponent("https://yppo.websitetotal.com/callback/");
          const responseType = "code";
          const scope = encodeURIComponent("public");
          const authorizationUri = `https://yppousers.websitetotal.com/oauth/authorize?client_id=${clientId}&redirect_uri=${redirectUri}&response_type=${responseType}&scope=${scope}`;

          window.location.href = authorizationUri;
        });

      function handleAuthCallback() {
        const queryString = window.location.search;
        const urlParams = new URLSearchParams(queryString);
        const code = urlParams.get("code");

        if (code) {
          exchangeCodeForToken(code);
        } else {
          console.error("Error: Authorization code not received.");
        }
      }

      function exchangeCodeForToken(code) {
        const clientId = "A0USaYg7dVEdtVPztz5TBThpbOwk9xCqXKx2p9g0zwo";
        // Note: Ideally, move clientSecret to your server to keep it secure
        const clientSecret = "B05vhMaEQvDLaS01NySCvjVzhZU5PlgwYhraiIP1lgw";
        const redirectUri = encodeURIComponent("https://yppo.websitetotal.com/callback/");
        const tokenUri = "https://yppousers.websitetotal.com/oauth/token";

        const body = `grant_type=authorization_code&code=${code}&redirect_uri=${redirectUri}&client_id=${clientId}&client_secret=${clientSecret}`;

        fetch(tokenUri, {
          method: "POST",
          headers: {
            "Content-Type": "application/x-www-form-urlencoded",
          },
          body: body,
        })
          .then((response) => response.json())
          .then((data) => {
            console.log("Token received:", data);
            const userInfo = parseJwt(data.access_token);
            displayUserInfo(userInfo);
            // Handle token usage here (e.g., storing in sessionStorage, redirecting, etc.)
          })
          .catch((error) => {
            console.error("Error exchanging token:", error);
          });
      }

      // Check if the page URL contains the 'code' parameter before running handleAuthCallback
      if (window.location.search.includes("code=")) {
        handleAuthCallback();
      }

      function parseJwt(token) {
        try {
          // Split the JWT into its three parts: Header, Payload, and Signature
          const base64Url = token.split(".")[1]; // Get the payload part
          const base64 = base64Url.replace(/-/g, "+").replace(/_/g, "/");
          const jsonPayload = decodeURIComponent(
            atob(base64)
              .split("")
              .map(function (c) {
                return "%" + ("00" + c.charCodeAt(0).toString(16)).slice(-2);
              })
              .join("")
          );

          return JSON.parse(jsonPayload);
        } catch (e) {
          console.error("Error decoding JWT:", e);
          return null;
        }
      }

      function displayUserInfo(userInfo) {
        if (userInfo && userInfo.user) {
          const infoDiv = document.getElementById("userInfo");
          infoDiv.innerHTML = `<strong>User Information:</strong><br>
                                     Language: ${userInfo.user.language || "N/A"}<br>
                                     Domain: ${userInfo.user.domain}<br>
                                     Plan: ${userInfo.user.plan}<br>
                                     Kind: ${userInfo.user.kind}`;
        }
      }
    </script>
  </body>
</html>
