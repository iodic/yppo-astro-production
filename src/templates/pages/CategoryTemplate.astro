---
import { sanityFetch } from "@/lib/utils/sanityFetch"

import Base from "@/layouts/Base.astro"
import BlogCategories from "@/components/blog/BlogCategories.astro"
import Blogs from "@/components/Blogs.astro"
import PageHeader from "@/components/PageHeader.astro"
import Shape from "@/components/Shape.astro"

import { humanize } from "@/lib/utils/textConverter"

const { category, allCategories, allPosts, lang } = Astro.props

const categoriesPageData = await sanityFetch({
  type: "categoriesPage",
  lang,
  object: `{
      title,
      pageMetadata {
        ...,
        "metaImage": metaImage.asset->url,
      },
      heroSection,
      generalText,
  }`
})

const posts: any = []
allPosts.map((post: any) => {
  const { tags } = post

  if (tags?.length && tags.some((tagObject: any) => tagObject.tag === category)) {
    posts.push(post)
  }
})

const { title, pageMetadata, heroSection, generalText } = categoriesPageData[0] || {}
const { metaTitle, metaDescription, metaImage, noIndex, canonicalUrl } = pageMetadata || {}
---

<Base
  title={title && title}
  metaTitle={metaTitle && metaTitle}
  description={metaDescription && metaDescription}
  metaImage={metaImage && metaImage}
  noIndex={noIndex && noIndex}
  canonical={canonicalUrl && canonicalUrl}
  lang={lang}
>
  <Shape />

  <section class="page-hero pb-8 pt-16">
    <div class="container">
      <div class="page-hero-content mx-auto max-w-[883px] text-center">
        <PageHeader pageData={{ title, heroSection }} />
        {
          generalText?.categoryText && (
            <h1 class="h2 mb-14 text-center">
              {generalText?.categoryText} <br /> <span class="text-primary">{humanize(category)}</span>
            </h1>
          )
        }
      </div>
    </div>
  </section>

  <section class="section">
    <div class="container">
      <BlogCategories categories={allCategories} allCategoriesText={generalText?.allCategoriesText} lang={lang} />
      <Blogs posts={posts} />
    </div>
  </section>
</Base>
